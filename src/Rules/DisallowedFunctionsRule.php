<?php

declare(strict_types=1);

namespace PlentymarketsRules\Rules;

use PhpParser\Node;
use PHPStan\Rules\Rule;
use PHPStan\Analyser\Scope;

/**
 * @implements Rule<Node\Expr\FuncCall>
 */
class DisallowedFunctionsRule implements Rule
{
    private $allowedFunctions = [
        'pluginApp',
        'array',
        'clone',
        'compact',
        'exit',
        'invariant',
        'sleep',
        'checkdate',
        'microtime',
        'time',
        'mktime',
        'strftime',
        'easter_date',
        'easter_days',
        'time',
        'addcslashes',
        'addslashes',
        'base64_decode',
        'base64_encode',
        'basename',
        'bin2hex',
        'chop',
        'chr',
        'chunk_split',
        'count_chars',
        'crypt',
        'ctype_alpha',
        'ctype_alnum',
        'date',
        'date_add',
        'date_create',
        'date_create_from_format',
        'date_diff',
        'date_modify',
        'date_sub',
        'filter_var',
        'getdate',
        'gmdate',
        'hash',
        'hash_hmac',
        'html_entity_decode',
        'htmlentities',
        'htmlspecialchars',
        'http_build_query',
        'json_decode',
        'json_encode',
        'lcfirst',
        'levenshtein',
        'ltrim',
        'mb_check_encoding',
        'mb_convert_encoding',
        'mb_detect_encoding',
        'mb_strcut',
        'mb_substr',
        'md5',
        'nl2br',
        'openssl_decrypt',
        'openssl_encrypt',
        'pathinfo',
        'preg_match',
        'preg_match_all',
        'preg_replace',
        'preg_split',
        'rawurldecode',
        'rawurlencode',
        'rtrim',
        'sha1',
        'simplexml_load_string',
        'sprintf',
        'str_getcsv',
        'str_pad',
        'str_ireplace',
        'str_replace',
        'str_split',
        'strcmp',
        'strip_tags',
        'stripos',
        'stripslashes',
        'strlen',
        'mb_strlen',
        'strnatcmp',
        'strpos',
        'strrpos',
        'strtolower',
        'strtotime',
        'strtoupper',
        'substr',
        'substr_count',
        'trim',
        'ucfirst',
        'ucwords',
        'uniqid',
        'urldecode',
        'urlencode',
        'utf8_decode',
        'utf8_encode',
        'wordwrap',
        'hexdec',
        'array_column',
        'array_combine',
        'array_diff',
        'array_diff_assoc',
        'array_diff_key',
        'array_filter',
        'array_flip',
        'array_intersect',
        'array_intersect_key',
        'array_key_exists',
        'array_keys',
        'array_map',
        'array_merge',
        'array_merge_recursive',
        'array_multisort',
        'array_pad',
        'array_pop',
        'array_push',
        'array_reduce',
        'array_replace',
        'array_replace_recursive',
        'array_reverse',
        'array_search',
        'array_shift',
        'array_slice',
        'array_unique',
        'array_unshift',
        'array_values',
        'array_chunk',
        'arsort',
        'asort',
        'count',
        'current',
        'end',
        'explode',
        'filter_var_array',
        'implode',
        'in_array',
        'krsort',
        'ksort',
        'natcasesort',
        'natsort',
        'range',
        'reset',
        'rsort',
        'shuffle',
        'sizeof',
        'sort',
        'unset',
        'uasort',
        'uksort',
        'usort',
        'key',
        'boolval',
        'ceil',
        'floatval',
        'floor',
        'intval',
        'max',
        'min',
        'number_format',
        'numfmt_create',
        'rand',
        'round',
        'pow',
        'header',
        'curl_close',
        'curl_errno',
        'curl_error',
        'curl_exec',
        'curl_getinfo',
        'curl_init',
        'curl_setopt',
        'curl_setopt_array',
        'function_exists',
        'is_array',
        'is_bool',
        'is_float',
        'is_int',
        'is_null',
        'is_numeric',
        'is_object',
        'is_string',
        'isset',
        'list',
        'property_exists',
        'getimagesize',
        'get_parent_class',
        'get_class',
    ];

    public function getNodeType(): string
    {
        return Node\Expr\FuncCall::class;
    }

    public function processNode(Node $node, Scope $scope): array
    {
        $functionName = $node->name->getLast();

        if (in_array($functionName, $this->allowedFunctions)) {
            return [];
        }

        return [
            sprintf('Function "%s()" is not allowed', $functionName),
        ];
    }
}
